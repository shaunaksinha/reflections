When would you want to use a remote repository rather than keeping all your work local?
In situations where there is a common codebase being worked on by multiple people. Everybode can get access to the shanges just by doing a git pull from the remote.
Also, keeping the remote repo adds some security since you can still get back your recent work if your machine conks off,


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
There is a possibility that broken code is pushed to github and you do not want to pull it before tests are run on CI server. Only after all tests pass, you can be sure that the code is working and only then choose to pull it to your local.
Also, if you are working on a feature on your local machine which relies on a particular version of the codebase, you do not want that version changing as and when people push to github. This would make it dofficult for you to develop your code alongside other people in the team.


Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are referred to repositories that are cloned onto your github account from another person's github account.
Clones are copies of repositories that you get from your github account by running 'git clone' command in terminal.
Branches are different chains of commits that have a common parent at some point in your repository.


What is the benefit of having a copy of the last known state of the remote stored locally?
It helps you to get info about your local branch against the remote (stored locally) whenever you do not have internet access.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Without using Git or Github, it would be very hard to collaborate. Manually merging changes in common files would be very hard and time-consuming.
I don't think any task would be easier without using these tools.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
I would want to keep changes in a separate branch whenever I am trying out experimental stuff.
The advantage of directly modifying master and pushing is that it is faster. But the disadvantage is that your code might break something and also you don't get any feedback. In case of creating a separate branch, pulling changes, merging, pushing to remote and finally creating a pull request allows other colleagues to review your work.
